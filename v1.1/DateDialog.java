/**
 * This class creates a dialog box in which the user inputs the date and
 * time according to the specifications required elsewhere in the program.
 * On submission the class becomes not visible, and information is extracted
 * from the TextField elements before disposal.
 * <p>
 * Large portions of this code was generated by NetBeans
 * <p>
 * This class was created for MHacks - Fall 2013
 * 
 * @author   packrat386
 * @version  %I%, %G%
 * @see      javax.swing.JTextField
 */
public class DateDialog extends javax.swing.JDialog {
  
  /**
   * Creates new Dialog DateDialog. <code> parent specifies a parent
   * relationship for this dialog, and modal toggles whether or not
   * the window is able to be de-selected.
   * 
   * @param   parent  either the frame object that created the dialog
   *                  or null
   * @param   modal   toggles whether the window can be deselected
   */
  public DateDialog(java.awt.Frame parent, boolean modal) {
    super(parent, modal);
    initComponents();
  }
  
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    
    DatePrompt = new javax.swing.JLabel();
    DateTextField = new javax.swing.JTextField();
    TimePrompt = new javax.swing.JLabel();
    TimeTextField = new javax.swing.JTextField();
    submit = new javax.swing.JButton();
    
    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    
    DatePrompt.setText("Please enter the event date as a single number yyyymmdd");
    
    DateTextField.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        DateTextFieldActionPerformed(evt);
      }
    });
    
    TimePrompt.setText("Enter the military format time (24 hour, hhmm) in GMT of the event");
    
    submit.setText("submit");
    submit.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        submitActionPerformed(evt);
      }
    });
    
    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
                              layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                            .addContainerGap()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(DatePrompt)
                                                        .addComponent(TimePrompt)
                                                        .addComponent(TimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(DateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addContainerGap(19, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(submit)
                                            .addContainerGap())
                             );
    layout.setVerticalGroup(
                            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addGroup(layout.createSequentialGroup()
                                          .addContainerGap()
                                          .addComponent(DatePrompt)
                                          .addGap(18, 18, 18)
                                          .addComponent(DateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                          .addGap(18, 18, 18)
                                          .addComponent(TimePrompt)
                                          .addGap(18, 18, 18)
                                          .addComponent(TimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                          .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                                          .addComponent(submit)
                                          .addContainerGap())
                           );
    
    pack();
  }// </editor-fold>//GEN-END:initComponents
  
  /**
   * This function is called if a particular action is done to DateTextField, but
   * it is empty
   * 
   * @param   evt  the ActionEvent that triggers the function
   */
  private void DateTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DateTextFieldActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_DateTextFieldActionPerformed
  
  /**
   * This function is called if the submit button is pressed and makes the
   * Dialog box no longer visible
   * 
   * @param   evt  the ActionEvent that triggers the function
   */
  private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
    setVisible(false);
  }//GEN-LAST:event_submitActionPerformed
  
  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(DateDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(DateDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(DateDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(DateDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>
    
    /* Create and display the dialog */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        DateDialog dialog = new DateDialog(new javax.swing.JFrame(), true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
          @Override
          public void windowClosing(java.awt.event.WindowEvent e) {
            System.exit(0);
          }
        });
        dialog.setVisible(true);
      }
    });
  }
  
  /**
   * Returns the content of the DateTextField as an integer
   * 
   * @return   The integer representation of DateTextField
   * @see      #DateTextField
   */
  public int getDateTextField(){
    return Integer.parseInt(DateTextField.getText());
  }
  
  /**
   * Returns the content of the TimeTextField as an integer
   * 
   * @return   The integer representation of TimeTextField
   * @see      #TimeTextField
   */
  public String getTimeTextField(){
    return TimeTextField.getText();
  }
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  
  /**
   * This JLabel holds the prompt for the user to enter the date
   */
  private javax.swing.JLabel DatePrompt;
  
  /**
   * This JTextField takes in the date information provided by the user
   * 
   * @see   #getDateTextField()
   */
  private javax.swing.JTextField DateTextField;
 
  /**
   * This JButton is the trigger to close the window and extract the user
   * provided data
   */
  private javax.swing.JButton submit;
  
  /**
   * This JLabel holds the prompt for the user to enter the Time 
   */
  private javax.swing.JLabel TimePrompt;
  
  /**
   * This JTextField takes in the time information provided by the user
   * 
   * @see   #getTimeTextField()
   */
  private javax.swing.JTextField TimeTextField;
  // End of variables declaration//GEN-END:variables
}
